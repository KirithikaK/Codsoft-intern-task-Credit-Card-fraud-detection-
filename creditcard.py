# -*- coding: utf-8 -*-
"""creditcard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SvU3tamAJcmJ7OYqZ8JA6oawdTeNl-xE
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')


df=pd.read_csv("/content/drive/MyDrive/p8/creditcard.csv")
df.head()

df.info()

df.shape

df.isnull().sum()

fraud=df[df['Class']==1]
valid=df[df['Class']==0]
outlierFraction=len(fraud)/float(len(valid))
print(outlierFraction)
print('Fraud cases:{}',format(len(df[df['Class']==1])))
print('valid transactions:{}',format(len(df[df['Class']==0])))

print("amount details of the fraudlent transaction")
fraud.Amount.describe()

print("details of the valid transaction")
valid.Amount.describe()

sns.countplot(df['Class'])

corr=df.corr()
plt.figure(figsize=(30,40))
sns.heatmap(corr,annot=True,cmap='coolwarm')

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
df['Amount']=sc.fit_transform(pd.DataFrame(df['Amount']))

df=df.drop(['Time'],axis=1)

df.duplicated().any()

df.shape

df['Class'].value_counts()

x=df.drop('Class',axis=1)
y=df['Class']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=42)

from sklearn.linear_model import LogisticRegression
log=LogisticRegression()
log.fit(x_train,y_train)

from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score
y_pred1=log.predict(x_test)
print(classification_report(y_test,y_pred1))
print("f1 score:",f1_score(y_test,y_pred1))

from sklearn.metrics import confusion_matrix
LABELS=['Normal','Fraud']
conf_matrix=confusion_matrix(y_test,y_pred1)
plt.figure(figsize=(12,12))
sns.heatmap(conf_matrix,xticklabels=LABELS,yticklabels=LABELS,annot=True,fmt="d")
plt.title("confusion matrix")
plt.ylabel('True class')
plt.xlabel('predicted class')
plt.show()

valid=df[df['Class']==0]
fraud=df[df['Class']==1]

valid.shape

fraud.shape

valid_sample=valid.sample(n=473)

valid_sample.shape

new_data=pd.concat([valid_sample,fraud],ignore_index=True)

new_data['Class'].value_counts()

new_data.head()

x=new_data.drop('Class',axis=1)
y=new_data['Class']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=42)

from sklearn.linear_model import LogisticRegression
log=LogisticRegression()
log.fit(x_train,y_train)

y_pred2=log.predict(x_test)

from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score

accuracy_score(y_test,y_pred2)

precision_score(y_test,y_pred2)

recall_score(y_test,y_pred2)

f1_score(y_test,y_pred2)

from sklearn import metrics
y_pred_proba=log.predict_proba(x_test)[::,1]
fpr,tpr,_=metrics.roc_curve(y_test,y_pred_proba)
plt.plot(fpr,tpr)
plt.ylabel('true positive rate')
plt.xlabel('false positive rate')
plt.show()

y_pred_proba=log.predict_proba(x_test)[::,1]
fpr,tpr,_=metrics.roc_curve(y_test,y_pred_proba)
auc=metrics.roc_auc_score(y_test,y_pred_proba)
plt.plot(fpr,tpr,label="AUC"+str(auc))
plt.ylabel('true positive rate')
plt.xlabel('false positive rate')
plt.legend(loc=4)
plt.show()

x=df.drop('Class',axis=1)
y=df['Class']

x.shape

y.shape

from imblearn.over_sampling import SMOTE

x_res,y_res=SMOTE().fit_resample(x,y)

y_res.value_counts()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x_res,y_res,test_size=0.20,random_state=42)

from sklearn.linear_model import LogisticRegression
log=LogisticRegression()
log.fit(x_train,y_train)

y_pred3=log.predict(x_test)

from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score

accuracy_score(y_test,y_pred3)

f1_score(y_test,y_pred3)

recall_score(y_test,y_pred3)

precision_score(y_test,y_pred3)

from sklearn import metrics
y_pred_proba=log.predict_proba(x_test)[::,1]
fpr,tpr,_=metrics.roc_curve(y_test,y_pred_proba)
plt.plot(fpr,tpr)
plt.ylabel('true positive rate')
plt.xlabel('false positive rate')
plt.show()